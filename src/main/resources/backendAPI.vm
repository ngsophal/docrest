jQuery.ajaxSetup( {
	cache: false,
	data: null
});

function backendAPI() {
	this.backendUrl = "${baseUrl}";

	this.no_more_requests = false;

	this.makeRequest = function(type,url,dataType,data,errMsg) {
		if(!this.no_more_requests){
			var response = null;
			var request = jQuery.ajax({
				async: false,
				type: type,
				url: this.backendUrl + url,
				crossDomain: true,
				accept: "*", 
				data: data,
				dataType: dataType,
				success: function(data, textStatus, jqXHR) {
					response = data;
				},
				error: function(jqXHR, textStatus, errorThrown) {
				},
				complete: function(){
					return this;
				}
			});
			if(request.status != 200){
				return this.handleError(request,errMsg);
			}else{
				return response;
			}

		}
	};
	this.handleError = function(request,errMsg){
		switch(request.status){
			case 401:
				alert('Your current session has expired please log back in.');
				this.no_more_requests = true;
				location.replace('/');
				break;
			default:
				if(typeof(errMsg) != 'undefined'){
					if(typeof(errMsg) == "object"){
						if(typeof(errMsg[request.status]) != 'undefined'){
							alert(errMsg[request.status]);
						}else{
							alert('An error occured, please try again.');
						}
					}else{
						alert(errMsg);
					}
				}else{
					alert('An error occured, please try again.');
				}
		}
		return 'error';
	}
}

    

#foreach( $resource in $resources )
#foreach( $method in $resource.methods )
#foreach( $rp in $resource.paths )
#foreach( $mp in $method.paths )
#set($included_vars = "")
/*
variables
#set($pathcount = 0)
#foreach( $param in $method.pathVariables )
		"name":"${param.name}"
			"description":"${param.comment}"
			"dataType":"${param.type}"
			"paramType":"path"
#set($pathcount = $velocityCount)
#if($included_vars == "")
#set($included_vars = ${param.name})
#else
#set($included_vars = $included_vars+","+${param.name})
#end
#end
#set($querycount = 0)
#foreach( $param in $method.parameters )
		"name":"${param.name}"
			"description":"${param.comment}"
			"dataType":"${param.type}"
			"paramType":"query"
#set($querycount = $velocityCount)
#end
#set($count = $pathcount+$querycount)
count = $count
*/
#if($querycount > 0)
#if($included_vars == "")
#set($included_vars = "data")
#else
#set($included_vars = $included_vars+",data")
#end
#end
backendAPI.prototype.${method.name} = function($included_vars) {
	var type = "${method.method}";
#if($querycount == 0)
	var data = {};
#end
#set($quote = '"')
#set( $escBegin = "{" )
#set( $escEnd = "}" )
#set($url = $rp.replace("${escBegin}domain${escEnd}/","") + "/${mp}")
#foreach( $param in $method.pathVariables )


#set( $url = $url.replace("{${param.name}}", "${quote}+${param.name}+${quote}") )

#end
#set($url = "${quote}${url}${quote}")
#set( $url = $url.replace("+${quote}${quote}", "") )
	var url = ${url};
	var dataType = "json";
	//var errMsg = [];
##	//errMsg[409] = "Category name already exists.";
	//var response = this.makeRequest(type,url,dataType,data,errMsg);
	var response = this.makeRequest(type,url,dataType,data);
	return response;
};

#end
#end
#end
#end

var projectAPI = new backendAPI();
